jibri {
  # Jibri的唯一标识符（ID）
  # jibri.id
  # 旧的配置
  # jibri_id
  id = ""

  # 处理（成功或失败）完请求之后，Jibri是否应该返回空闲状态。
  # true：Jibri不会返回到IDLE状态，Jibri需要重新启动才能再次使用。
  # jibri.single-use-mode
  # 旧的配置
  # single_use_mode
  single-use-mode = false

  # API
  api {
    # HTTP
    http {
      # 外部API端口
      # jibri.api.http.external-api-port
      # 旧的配置
      # http_api_port
      external-api-port = 2222

      # 内部API端口
      # jibri.api.http.internal-api-port
      # 旧的配置
      # internal_http_port
      internal-api-port = 3333
    }

    # XMPP
    xmpp {
      # XMPP环境，参考：example_xmpp_envs.conf
      # jibri.api.xmpp.environments
      # 旧的配置
      # xmpp_environments
      environments = []
    }
  }

  # 录制
  recording {
    # 录制目录
    # jibri.recording.recordings-directory
    # 旧的配置
    # recording_directory
    recordings-directory = "/tmp/recordings"

    # 完成脚本目录
    # jibri.recording.finalize-script
    # 旧的配置
    # finalize_recording_script_path
    finalize-script = "/path/to/finalize"
  }

  # 流式传输
  streaming {启动流时使用的RTMP URL必须至少匹配此列表中的一个模式
    # 允许的RTMP URL的正则表达式模式列表。使用RTMP URL启动一个流时必须至少匹配这个列表中的一个模式。
    # jibri.streaming.rtmp-allow-list
    rtmp-allow-list = [
      # 默认允许所有服务
      ".*"
    ]
  }

  # SIP
  sip {
    # VoxImplant中呼出场景的路由规则前缀
    # jibri.sip.outbound-prefix
    outbound-prefix = "out_"
  }

  # ffmpeg捕获器
  ffmpeg {
    # 分辨率
    # jibri.ffmpeg.resolution
    resolution = "1920x1080"

    # 帧率
    # jibri.ffmpeg.framerate
    framerate = 30

    # 编码速度与压缩比（预设值越低压缩率越好）。
    # 有效值：ultrafast、superfast、veryfast、faster、fast、medium、slow、slower、veryslow、placebo
    # jibri.ffmpeg.video-encode-preset
    video-encode-preset = "veryfast"

    # 队列大小
    # jibri.ffmpeg.queue-size
    queue-size = 4096

    # 流的最大码率
    # jibri.ffmpeg.streaming-max-bitrate
    streaming-max-bitrate = 2976

    # CRF音阶的范围是0-51，其中，0：无损；23：默认值；51：质量最差。
    # 值越小生成的质量越好，合理范围是17-28。
    # 17或18在视觉上无损或几乎无损，看起来与输入相同或几乎相同，不过在技术上不是无损的。
    # https://trac.ffmpeg.org/wiki/Encode/H.264#crf
    # jibri.ffmpeg.h264-constant-rate-factor
    h264-constant-rate-factor = 25

    # Linux上捕获音频时使用的音频源
    # jibri.ffmpeg.audio-source
    audio-source = "alsa"

    # Linux上捕获音频时使用的音频设备
    # jibri.ffmpeg.audio-device
    audio-device = "plug:bsnoop"
  }

  # chrome
  chrome {
    # 启动时传递给chromium的标记
    # jibri.chrome.flags
    flags = [
      "--use-fake-ui-for-media-stream",
      "--start-maximized",
      "--kiosk",
      "--enabled",
      "--autoplay-policy=no-user-gesture-required"
    ]
  }

  # 数据统计
  stats {
    # 是否启用数据统计进程
    # jibri.stats.enable-stats-d
    # 旧的配置
    # enable_stats_d
    enable-stats-d = true
  }

  # webhook事件
  webhook {
    # 接收webhook事件的订阅者列表
    # jibri.webhook.subscribers
    subscribers = []
  }

  # jwt信息
  jwt-info {
    # .pem文件的路径，在webhook请求中用于签名JWT token。
    # 如果没有设置这个路径，webhook请求中不会添加JWT。
    # jibri.jwt-info.signing-key-path
    # signing-key-path = "/path/to/key.pem"

    # 作为JWT中的一部分的密钥ID
    # jibri.jwt-info.kid
    # kid = "key-id"

    # JWT的发行机构
    # jibri.jwt-info.issuer
    # issuer = "issuer"

    # JWT的听众
    # jibri.jwt-info.audience
    # audience = "audience"

    # 生成的每个JWT的TTL，不能低于10 minutes
    # jibri.jwt-info.ttl
    # ttl = 1 hour
  }

  # 呼叫状态检查
  call-status-checks {
    # 如果不是所有客户端音频或视频都静音，但是Jibri没有检测到任何输入的数据流（音频或视频），
    # 那么Jibri会在NO_MEDIA_TIMEOUT到期之后停止录制。
    # jibri.call-status-checks.no-media-timeout
    no-media-timeout = 3 minutes

    # 如果所有客户端音频或视频都静音，Jibri会认为这是一个空的呼叫，并且会在ALL_MUTED_TIMEOUT到期之后停止录制。
    # jibri.call-status-checks.all-muted-timeout
    all-muted-timeout = 10 minutes

    # 如果检测到一个呼叫是空的，Jibri会考虑呼叫已经空了多长时间。
    # 如果呼叫空的时间比DEFAULT_CALL_EMPTY_TIMEOUT长，Jibri会认为呼叫是空的，并停止录制。
    # jibri.call-status-checks.default-call-empty-timeout
    default-call-empty-timeout = 30 seconds

    # 如果ICE没有完成，或在这个时间内处于connected之外的其他状态，Jibri将会停止。
    # jibri.call-status-checks.ice-connection-timeout
    ice-connection-timeout = 30 seconds
  }
}
